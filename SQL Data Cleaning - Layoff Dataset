-- https://www.kaggle.com/datasets/swaptr/layoffs-2022
SELECT * 
FROM world_layoffs.layoffs;

-- firstly I create a staging table
CREATE TABLE world_layoffs.layoffs_staging 
LIKE world_layoffs.layoffs;

INSERT layoffs_staging 
SELECT * FROM world_layoffs.layoffs;

-- Steps that I need to follow:
-- 1. check for duplicates
-- 2. standardize data and fix errors
-- 3. null and blank values 
-- 4. remove unnecessary columns and rows





-- 1. Remove Duplicates

SELECT *
FROM world_layoffs.layoffs_staging;

SELECT * FROM (
  SELECT company, location, industry, total_laid_off,percentage_laid_off,`date`,stage, country, funds_raised_millions, 
    ROW_NUMBER() OVER (PARTITION BY 
      company, location, industry, total_laid_off,percentage_laid_off,`date`, stage, country, funds_raised_millions
			) AS row_num
	FROM world_layoffs.layoffs_staging
) duplicates
WHERE row_num > 1;

-- I want to delete the rows where row number is greater than 1
-- I create a new column and add row numbers in, then delete rows where row number is greater than 1, then delete that column

ALTER TABLE world_layoffs.layoffs_staging ADD row_num INT;

SELECT *
FROM world_layoffs.layoffs_staging;

CREATE TABLE world_layoffs.layoffs_staging2 
(`company` text,
`location`text,
`industry`text,
`total_laid_off` INT,
`percentage_laid_off` text,
`date` text,
`stage`text,
`country` text,
`funds_raised_millions` int,
row_num INT);

INSERT INTO world_layoffs.layoffs_staging2
(`company`,
`location`,
`industry`,
`total_laid_off`,
`percentage_laid_off`,
`date`,
`stage`,
`country`,
`funds_raised_millions`,
`row_num`)
SELECT `company`,
`location`,
`industry`,
`total_laid_off`,
`percentage_laid_off`,
`date`,
`stage`,
`country`,
`funds_raised_millions`,
	ROW_NUMBER() OVER (PARTITION BY 
		company, location, industry, total_laid_off,percentage_laid_off,`date`, stage, country, funds_raised_millions
		) AS row_num
	FROM world_layoffs.layoffs_staging;

-- now I can delete rows where row_num is greater than 1

DELETE FROM world_layoffs.layoffs_staging2
WHERE row_num >= 2;

SELECT *
FROM world_layoffs.layoffs_staging2
WHERE row_num >= 2;





-- 2. Standardize Data

SELECT * 
FROM world_layoffs.layoffs_staging2;

SELECT DISTINCT industry
FROM world_layoffs.layoffs_staging2
ORDER BY industry;
-- There are some null and empty rows in industry

SELECT *
FROM world_layoffs.layoffs_staging2
WHERE industry IS NULL 
OR industry = ''
ORDER BY industry;

SELECT *
FROM world_layoffs.layoffs_staging2
WHERE company LIKE 'airbnb%';

-- the industry of airbnb isn't populated.
-- My idea is to update the missing industry values by using existing companies with the same name

-- I set the blanks to nulls as it will be easier to work with
UPDATE world_layoffs.layoffs_staging2
SET industry = NULL
WHERE industry = '';

-- now I populate those nulls
UPDATE layoffs_staging2 t1
JOIN layoffs_staging2 t2
ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL
AND t2.industry IS NOT NULL;

SELECT *
FROM world_layoffs.layoffs_staging2
WHERE industry IS NULL 
OR industry = ''
ORDER BY industry;

-- Bally's industry value is still missings. I will communicate with my higher level colleagues about it
-- In the meantime I will just fill in 'Other'
UPDATE world_layoffs.layoffs_staging2
SET industry = 'Other'
WHERE company = "Bally's"
AND (industry IS NULL OR industry = '');


-- Continue checking, I can see the Crypto has different names but same meaning
SELECT DISTINCT industry
FROM world_layoffs.layoffs_staging2
ORDER BY industry;

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry IN ('Crypto Currency', 'CryptoCurrency');

SELECT DISTINCT country
FROM world_layoffs.layoffs_staging2
ORDER BY country;
-- There are "United States" and "United States."

UPDATE layoffs_staging2
SET country = TRIM(TRAILING '.' FROM country);

SELECT DISTINCT country
FROM world_layoffs.layoffs_staging2
ORDER BY country;

-- I fix the date columns:
SELECT *
FROM world_layoffs.layoffs_staging2;

UPDATE layoffs_staging2
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;

SELECT *
FROM world_layoffs.layoffs_staging2;





-- 3. Look at Null Values
-- the null values in total_laid_off, percentage_laid_off, and funds_raised_millions should not be changed





-- 4. remove any columns and rows we need to

SELECT *
FROM world_layoffs.layoffs_staging2
WHERE total_laid_off IS NULL;

SELECT *
FROM world_layoffs.layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

-- Delete unnecessary data
DELETE FROM world_layoffs.layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

SELECT * 
FROM world_layoffs.layoffs_staging2;

ALTER TABLE layoffs_staging2
DROP COLUMN row_num;


SELECT * 
FROM world_layoffs.layoffs_staging2;
